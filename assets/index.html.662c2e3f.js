import{_ as t}from"./plugin-vue_export-helper.21dcd24c.js";import{o,c as i,a as n,b as p,e as s,d as a,r as c}from"./app.387dd8aa.js";const l={},u=s(`<h3 align="center">A Springboot extension that integrates Kafka dependencies</h3><p align="center"><a href="https://github.com/JDK-Plus/spring-boot-starter-kafka/blob/master/LICENSE"><img src="https://img.shields.io/github/license/JDK-Plus/spring-boot-starter-kafka.svg"></a><a href="https://github.com/JDK-Plus/spring-boot-starter-kafka/releases"><img src="https://img.shields.io/github/release/JDK-Plus/spring-boot-starter-kafka.svg"></a><a href="https://github.com/JDK-Plus/spring-boot-starter-kafka/stargazers"><img src="https://img.shields.io/github/stars/JDK-Plus/spring-boot-starter-kafka.svg"></a><a href="https://github.com/JDK-Plus/spring-boot-starter-kafka/network/members"><img src="https://img.shields.io/github/forks/JDK-Plus/spring-boot-starter-kafka.svg"></a></p><h2 id="use-maven-to-import" tabindex="-1"><a class="header-anchor" href="#use-maven-to-import" aria-hidden="true">#</a> Use maven to import</h2><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>plus.jdk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),r=a("For more import methods, see\uFF1A"),d={href:"https://search.maven.org/artifact/plus.jdk/spring-boot-starter-kafka/1.0.2/jar",target:"_blank",rel:"noopener noreferrer"},m=a("spring-boot-starter-kafka"),k=s(`<h2 id="configuration-items-to-be-added" tabindex="-1"><a class="header-anchor" href="#configuration-items-to-be-added" aria-hidden="true">#</a> Configuration items to be added</h2><h3 id="enable-the-component" tabindex="-1"><a class="header-anchor" href="#enable-the-component" aria-hidden="true">#</a> Enable the component</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Enable the component</span>
plus.jdk.kafka.client.enabled<span class="token operator">=</span>true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="specify-the-username-and-password" tabindex="-1"><a class="header-anchor" href="#specify-the-username-and-password" aria-hidden="true">#</a> Specify the username and password</h3><p>You can specify global usernames and passwords using the following configuration items</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Specifies the user name for kafka globally</span>
plus.jdk.kafka.client.user-name<span class="token operator">=</span>root

<span class="token comment"># Specifies the kafka global password</span>
plus.jdk.kafka.client.password<span class="token operator">=</span><span class="token number">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But what if there are special topic user names and passwords that differ from the global configuration items? You can specify a username and password for a topic with the following configuration items</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># This parameter is optional. If you do not want to use the global user name, </span>
<span class="token comment"># you can use this parameter to specify it</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.user-name<span class="token operator">=</span>root
<span class="token comment"># This parameter is optional. If you do not want to use the global password, </span>
<span class="token comment"># you can use this parameter separately</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.password<span class="token operator">=</span><span class="token number">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="specify-consumer-configuration-items" tabindex="-1"><a class="header-anchor" href="#specify-consumer-configuration-items" aria-hidden="true">#</a> Specify consumer configuration items</h3><p>You can use the following configuration to set up the global consumer configuration items\uFF1A</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Optional configuration item, which specifies the global consumption configuration item</span>
plus.jdk.kafka.client.consumer-global-config<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.key<span class="token operator">=</span>sasl.mechanism
plus.jdk.kafka.client.consumer-global-config<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.value<span class="token operator">=</span>PLAIN
plus.jdk.kafka.client.consumer-global-config<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>.key<span class="token operator">=</span>sasl.mechanism
plus.jdk.kafka.client.consumer-global-config<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>.value<span class="token operator">=</span>PLAIN
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Obviously, there will always be exceptions. In your daily development work,</p><p>there will certainly be special topic configuration items that are not consistent with others.</p><p>In this case, you can specify a separate consumption configuration item like this:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Optional configuration items. </span>
<span class="token comment"># If you want to overwrite the global consumption configuration items, </span>
<span class="token comment"># you can specify them as follows</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.consumer-configs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.key<span class="token operator">=</span>xxx
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.consumer-configs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.value<span class="token operator">=</span>xxx

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="specifies-the-producer-configuration-item" tabindex="-1"><a class="header-anchor" href="#specifies-the-producer-configuration-item" aria-hidden="true">#</a> Specifies the producer configuration item</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># This parameter is optional. It specifies global production configuration items</span>
plus.jdk.kafka.client.producer-global-config<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.key<span class="token operator">=</span>sasl.mechanism
plus.jdk.kafka.client.producer-global-config<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.value<span class="token operator">=</span>PLAIN
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Obviously, there will always be exceptions.</p><p>In your daily development work, there will certainly be special topic configuration items that are not consistent with others.</p><p>In this case, you can specify the production configuration items as follows:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># This parameter is optional. </span>
<span class="token comment"># If you want to overwrite all production configuration items, you can specify it as follows</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.producer-configs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.key<span class="token operator">=</span>xxx
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.producer-configs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.value<span class="token operator">=</span>xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="how-to-describe-a-topic-production-and-consumption" tabindex="-1"><a class="header-anchor" href="#how-to-describe-a-topic-production-and-consumption" aria-hidden="true">#</a> How to describe a topic production and consumption</h3><h4 id="specify-the-current-topic-configuration-name" tabindex="-1"><a class="header-anchor" href="#specify-the-current-topic-configuration-name" aria-hidden="true">#</a> Specify the current topic configuration name</h4><p>First, we define a topic configuration group name, which is mandatory. This value should be unique and not repeatable, and consumer and producer instances will be initialized based on this value when consumption is started or messages are pushed</p><p>One might wonder about this design: &quot;Why not just use the kafka topic as the configuration name?&quot; .</p><p>In fact, both are possible, but this is written to take into account the fact that the online environment and the test environment have different topic names, which is very common.</p><p>You can specify the configuration group name for the current topic using the following configuration</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.name<span class="token operator">=</span>my_first_topic_conf_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This name is used directly with &#39;@KafkaClient&#39;. When you specify the configuration group name in &#39;@KafkaClient&#39;, you initialize the consumer and producer based on the contents of the specified configuration group.</p><h4 id="define-a-producer-using-the-configuration-description" tabindex="-1"><a class="header-anchor" href="#define-a-producer-using-the-configuration-description" aria-hidden="true">#</a> Define a producer using the configuration description</h4><p>This allows you to specify the name of the current configuration group, the topic name, and the list of brokers that the producer uses to produce messages.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Configuration Group Name</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.name<span class="token operator">=</span>my_first_topic_conf_name
<span class="token comment"># The name of the current topic to be consumed or produced. This parameter is mandatory</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.topic<span class="token operator">=</span>test_topic_name
<span class="token comment"># This field is optional if there is no need for production messages. If it is empty, messages cannot be pushed</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.producer-brokers<span class="token operator">=</span><span class="token number">127.0</span>.0.1:9090,10.11.1.102:9090
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="define-a-consumer-using-the-configuration-description" tabindex="-1"><a class="header-anchor" href="#define-a-consumer-using-the-configuration-description" aria-hidden="true">#</a> Define a consumer using the configuration description</h4><p>As for consumption, I added configuration items according to my daily business requirements when writing the code. If you want to customize it, You can use the <code>plus.jdk.kafka.client.topic-definitions[0].consumer-configs</code> configuration group specified</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Configuration Group Name</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.name<span class="token operator">=</span>my_first_topic_conf_name
<span class="token comment"># The name of the current topic to be consumed or produced. This parameter is mandatory</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.topic<span class="token operator">=</span>test_topic_name
<span class="token comment"># The list of consuming brokers is optional if consumption messages are not required, </span>
<span class="token comment"># otherwise it must be filled in. If empty, consumption cannot be started</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.consume-brokers<span class="token operator">=</span><span class="token number">127.0</span>.0.1:8888,127.0.0.1:8889
<span class="token comment"># This parameter is optional if no consumption message is required. Otherwise, </span>
<span class="token comment"># this parameter is mandatory. If this parameter is empty, consumption cannot be started</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.group-name<span class="token operator">=</span>groupName
<span class="token comment"># This parameter is optional. Whether to automatically commit consumption</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.auto-commit<span class="token operator">=</span>false
<span class="token comment"># Enable several consumers as optional configuration items</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.consumer-num<span class="token operator">=</span><span class="token number">1</span>
<span class="token comment"># An optional configuration item that specifies the maximum number of messages pulled per consumption</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.consumer-max-poll-record<span class="token operator">=</span><span class="token number">1</span>
<span class="token comment"># This parameter is optional. If you do not want to use the global user name, </span>
<span class="token comment"># you can use this parameter to specify it</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.user-name<span class="token operator">=</span>root
<span class="token comment"># This parameter is optional. If you do not want to use the global password, you can use this parameter separately</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.password<span class="token operator">=</span><span class="token number">123456</span>
<span class="token comment"># An optional configuration item that consumes the timeout period for pulling messages</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.poll-timeout<span class="token operator">=</span><span class="token number">2</span>
<span class="token comment"># Optional configuration item, an instance of the bean. Need to implement plus.jdk.kafka.com mon. </span>
<span class="token comment"># IConsumeDecider interface, to judge whether the topic to start process, the default is not open</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.decider<span class="token operator">=</span>plus.jdk.kafka.common.DefaultConsumeDecider

<span class="token comment"># Optional configuration items. If you want to overwrite the global consumption configuration items, </span>
<span class="token comment"># you can specify them as follows</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.consumer-configs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.key<span class="token operator">=</span>xxx
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.consumer-configs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.value<span class="token operator">=</span>xxx

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In many cases, we need the service startup decide whether need to start the process of consumption, so here you can claim an inheritance from <code>plus.jdk.kafka.common.DefaultConsumeDecider</code> to determine whether to start the consuming process. Use the following configuration items to specify it in the configuration.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.decider<span class="token operator">=</span>plus.jdk.kafka.common.DefaultConsumeDecider
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Interface <code>plus.jdk.kafka.common.DefaultConsumeDecider</code> is defined as follows</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">plus<span class="token punctuation">.</span>jdk<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultConsumeDecider</span> <span class="token keyword">implements</span> <span class="token class-name">IConsumeDecider</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// If true, the consumption process starts</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>A configuration item that contains both producers and consumers is described below</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Configuration Group Name</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.name<span class="token operator">=</span>my_first_topic_conf_name
<span class="token comment"># The name of the current topic to be consumed or produced. This parameter is mandatory</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.topic<span class="token operator">=</span>test_topic_name
<span class="token comment"># The list of consuming brokers is optional if consumption messages are not required, </span>
<span class="token comment"># otherwise it must be filled in. If empty, consumption cannot be started</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.consume-brokers<span class="token operator">=</span><span class="token number">127.0</span>.0.1:8888,127.0.0.1:8889
<span class="token comment"># This field is optional if there is no need for production messages. </span>
<span class="token comment"># If it is empty, messages cannot be pushed</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.producer-brokers<span class="token operator">=</span><span class="token number">127.0</span>.0.1:9090,10.11.1.102:9090
<span class="token comment"># This parameter is optional if no consumption message is required. Otherwise, </span>
<span class="token comment"># this parameter is mandatory. If this parameter is empty, consumption cannot be started</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.group-name<span class="token operator">=</span>groupName
<span class="token comment"># This parameter is optional. Whether to automatically commit consumption</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.auto-commit<span class="token operator">=</span>false
<span class="token comment"># Enable several consumers as optional configuration items</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.consumer-num<span class="token operator">=</span><span class="token number">1</span>
<span class="token comment"># An optional configuration item that specifies the maximum number of messages pulled per consumption</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.consumer-max-poll-record<span class="token operator">=</span><span class="token number">1</span>
<span class="token comment"># This parameter is optional. If you do not want to use the global user name, </span>
<span class="token comment"># you can use this parameter to specify it</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.user-name<span class="token operator">=</span>root
<span class="token comment"># This parameter is optional. If you do not want to use the global password, you can use this parameter separately</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.password<span class="token operator">=</span><span class="token number">123456</span>
<span class="token comment"># An optional configuration item that consumes the timeout period for pulling messages</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.poll-timeout<span class="token operator">=</span><span class="token number">2</span>
<span class="token comment"># Optional configuration item, an instance of the bean. Need to implement plus.jdk.kafka.com mon. </span>
<span class="token comment"># IConsumeDecider interface, to judge whether the topic to start process, the default is not open</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.decider<span class="token operator">=</span>plus.jdk.kafka.common.DefaultConsumeDecider

<span class="token comment"># Optional configuration items. If you want to overwrite the global consumption configuration items, </span>
<span class="token comment"># you can specify them as follows</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.consumer-configs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.key<span class="token operator">=</span>xxx
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.consumer-configs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.value<span class="token operator">=</span>xxx

<span class="token comment"># This parameter is optional. If you want to overwrite all production configuration items, you can specify it as follow</span>
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.producer-configs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.key<span class="token operator">=</span>xxx
plus.jdk.kafka.client.topic-definitions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.producer-configs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.value<span class="token operator">=</span>xxx

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="define-a-kafka-queue-that-can-produce-and-consume-messages" tabindex="-1"><a class="header-anchor" href="#define-a-kafka-queue-that-can-produce-and-consume-messages" aria-hidden="true">#</a> Define a kafka queue that can produce and consume messages</h2><h3 id="the-consumption-and-production-of-the-kafka-queue-can-be-defined-as-follows" tabindex="-1"><a class="header-anchor" href="#the-consumption-and-production-of-the-kafka-queue-can-be-defined-as-follows" aria-hidden="true">#</a> The consumption and production of the kafka queue can be defined as follows:</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">plus<span class="token punctuation">.</span>jdk<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>global<span class="token punctuation">.</span></span><span class="token class-name">IKafkaQueue</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">plus<span class="token punctuation">.</span>jdk<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">KafkaClient</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@KafkaClient</span><span class="token punctuation">(</span><span class="token string">&quot;my_first_topic_conf_name&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFirstTopicQueue</span> <span class="token keyword">extends</span> <span class="token class-name">IKafkaQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * Process the data in the message queue. 
     * If consumption is not required, this method may not be implemented
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">processMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Process consumption data based on incoming data</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>@KafkaClient</code> annotation in the above example declares the queue definition as a bean instance. If consumption-related content is configured, the consumption service will be started according to the configuration above.</p><h3 id="how-to-push-messages" tabindex="-1"><a class="header-anchor" href="#how-to-push-messages" aria-hidden="true">#</a> How to push messages</h3><p>When pushing a message, you can call the <code>pushMessage</code> method of the <code>MyFirstTopicQueue</code> queue defined above to complete the message push.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutionException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Future</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyKafkaTestService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">MyFirstTopicQueue</span> myFirstTopicQueue<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">RecordMetadata</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> futureList <span class="token operator">=</span> myFirstTopicQueue<span class="token punctuation">.</span><span class="token function">pushMessage</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;data1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;data2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>message<span class="token punctuation">,</span> recordMetadata<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;push message {} failed, message:{}&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;push message {} success&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,48);function v(b,f){const e=c("ExternalLinkIcon");return o(),i("div",null,[u,n("p",null,[r,n("a",d,[m,p(e)])]),k])}var y=t(l,[["render",v],["__file","index.html.vue"]]);export{y as default};
