import{_ as e,a as t}from"./cli-plus-demo.2d338668.js";import{_ as p}from"./cli-plus-use.544bcf12.js";import{_ as o}from"./plugin-vue_export-helper.21dcd24c.js";import{o as i,c,a as n,b as l,w as u,e as s,r,d}from"./app.387dd8aa.js";const k={},m=s('<p align="center"><img align="center" src="'+e+'" alt="drawing" style="width:100%;"></p><h3 align="center">Cli-Plus - Writing Command Line Instructions in Java</h3><p align="center"><a href="https://github.com/JDK-Plus/cli-plus/blob/master/LICENSE"><img src="https://img.shields.io/github/license/JDK-Plus/cli-plus.svg"></a><a href="https://github.com/JDK-Plus/cli-plus/releases"><img src="https://img.shields.io/github/release/JDK-Plus/cli-plus.svg"></a><a href="https://github.com/JDK-Plus/cli-plus/stargazers"><img src="https://img.shields.io/github/stars/JDK-Plus/cli-plus.svg"></a><a href="https://github.com/JDK-Plus/cli-plus/network/members"><img src="https://img.shields.io/github/forks/JDK-Plus/cli-plus.svg"></a></p><p align="center">Cli-Plus is an open source framework for writing command-line commands in Java. It is simple, efficient, and easy to use, and can improve team work efficiency.</p><hr><h1 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h1><p>This is a framework for writing command-line instruction sets using java</p>',7),v=d("\u4E2D\u6587\u6587\u6863"),b=s(`<h2 id="maven-dependencies" tabindex="-1"><a class="header-anchor" href="#maven-dependencies" aria-hidden="true">#</a> Maven Dependencies</h2><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>plus.jdk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cli-plus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="how-to-define-a-command-line-and-declare-parameters" tabindex="-1"><a class="header-anchor" href="#how-to-define-a-command-line-and-declare-parameters" aria-hidden="true">#</a> How to define a command line and declare parameters</h2><h3 id="how-to-define-a-command" tabindex="-1"><a class="header-anchor" href="#how-to-define-a-command" aria-hidden="true">#</a> How to define a command</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">plus<span class="token punctuation">.</span>jdk<span class="token punctuation">.</span>cli<span class="token punctuation">.</span>command</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">plus<span class="token punctuation">.</span>jdk<span class="token punctuation">.</span>cli<span class="token punctuation">.</span></span><span class="token class-name">JCommandLinePlus</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">plus<span class="token punctuation">.</span>jdk<span class="token punctuation">.</span>cli<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">CommandLinePlus</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">plus<span class="token punctuation">.</span>jdk<span class="token punctuation">.</span>cli<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">CommandParameter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">plus<span class="token punctuation">.</span>jdk<span class="token punctuation">.</span>cli<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">SubInstruction</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@CommandLinePlus</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">&quot;This is a test command line&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJCommand</span> <span class="token keyword">extends</span> <span class="token class-name">JCommandLinePlus</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * You can use the required option to specify that this parameter must be entered.
     * Call the implemented validate() function to validate the parameters
     */</span>
    <span class="token annotation punctuation">@CommandParameter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;u&quot;</span><span class="token punctuation">,</span> longName <span class="token operator">=</span> <span class="token string">&quot;uid&quot;</span><span class="token punctuation">,</span> needArgs <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">&quot;\u7528\u6237id&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> uid<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@CommandParameter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span> longName <span class="token operator">=</span> <span class="token string">&quot;phone&quot;</span><span class="token punctuation">,</span> needArgs <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">&quot;user phone&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * For easy option\uFF0Cyou can use, -<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span> or --<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>longName</span><span class="token punctuation">&gt;</span></span> declare parameters\uFF0Cfor example\uFF0C -e xxx@jdk.plus, or --email xxx@jdk.plus
     */</span>
    <span class="token annotation punctuation">@CommandParameter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;e&quot;</span><span class="token punctuation">,</span> longName <span class="token operator">=</span> <span class="token string">&quot;email&quot;</span><span class="token punctuation">,</span> needArgs <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">&quot;user email&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * You can use multiple options to specify the list\uFF0Cfor example : -d d1 -d d2 --data d3
     */</span>
    <span class="token annotation punctuation">@CommandParameter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">,</span> longName <span class="token operator">=</span> <span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> needArgs <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">&quot;args list&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> dataList<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * You can use multiple options to specify the set\uFF0Cfor example : -s d1 -s d2 --set d3
     */</span>
    <span class="token annotation punctuation">@CommandParameter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;s&quot;</span><span class="token punctuation">,</span> longName <span class="token operator">=</span> <span class="token string">&quot;set&quot;</span><span class="token punctuation">,</span> needArgs <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">&quot;args set&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> dataSet<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * For options that do not require parameters\uFF0CYou can use Boolean type to receive\uFF0C
     * For example, specify -h or --help, the value will be assigned to true, otherwise false
     */</span>
    <span class="token annotation punctuation">@CommandParameter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;h&quot;</span><span class="token punctuation">,</span> longName <span class="token operator">=</span> <span class="token string">&quot;help&quot;</span><span class="token punctuation">,</span> needArgs <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">&quot;display help information&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> help<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * You can use @SubInstruction annotations to define subcommands, 
     * whenever the instruction specifies that the sub-instruction is required to be executed\uFF0C
     * then the logic in the sub-instruction will be executed directly\uFF0C
     * no longer execute the task in the current command
     */</span>
    <span class="token annotation punctuation">@SubInstruction</span>
    <span class="token annotation punctuation">@CommandParameter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;sub&quot;</span><span class="token punctuation">,</span> longName <span class="token operator">=</span> <span class="token string">&quot;subInstruction&quot;</span><span class="token punctuation">,</span> needArgs <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">&quot;this is a subcommands&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">TestSubInstruction</span> subInstruction<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doInCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>help<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Show help if the -h or --help option is specified</span>
            <span class="token function">showUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// to do something according to Input parameters</span>
        <span class="token comment">// which has been assigned to a member variable</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">TestJCommand</span> testCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestJCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        testCommand<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="execute-a-custom-set-of-instructions" tabindex="-1"><a class="header-anchor" href="#execute-a-custom-set-of-instructions" aria-hidden="true">#</a> Execute a custom set of instructions\uFF1A</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>java -jar xxx.jar -u <span class="token number">123567</span> -p <span class="token string">&quot;p2data ss&quot;</span> --email xxx@jdk.plus -h -s s1 -s s2 --set s3 -d d1 -d d2 --data d3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="according-to-the-parameter-passing-described-above-the-effect-of-execution-is-as-follows" tabindex="-1"><a class="header-anchor" href="#according-to-the-parameter-passing-described-above-the-effect-of-execution-is-as-follows" aria-hidden="true">#</a> According to the parameter passing described above, the effect of execution is as follows</h3><p><img src="`+p+`" alt="" loading="lazy"></p><h3 id="about-some-default-configuration-files" tabindex="-1"><a class="header-anchor" href="#about-some-default-configuration-files" aria-hidden="true">#</a> About some default configuration files</h3><p>You need to specify <code>cli-plus.properties</code> in your project <code>resources</code> directory.</p><blockquote><p>Of course, it is also possible to not specify, and the default configuration provided by us will be used.</p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>plus.jdk.help.header.welcome<span class="token operator">=</span>Welcome to use cli-plus
plus.jdk.help.header.description<span class="token operator">=</span>The <span class="token builtin class-name">command</span> options are described below:
plus.jdk.help.footer.description<span class="token operator">=</span>usage: xxx-tool -cn xx -e <span class="token string">&quot;ls /root&quot;</span>
plus.jdk.help.footer.contact<span class="token operator">=</span>mail: moon@jdk.plus
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="how-to-display-help-information-for-commands-and-subcommands" tabindex="-1"><a class="header-anchor" href="#how-to-display-help-information-for-commands-and-subcommands" aria-hidden="true">#</a> How to display help information for commands and subcommands</h3><p>Calling the encapsulated <code>showUsage</code> method can generate and print help information, for example:</p><p><img src="`+t+`" alt="" loading="lazy"></p><blockquote><p>Of course, if you are not satisfied with this style, you can override the <code>showUsage</code> method to customize the help information for your instruction set</p></blockquote><h2 id="about-encapsulation-of-instructions-use-shell" tabindex="-1"><a class="header-anchor" href="#about-encapsulation-of-instructions-use-shell" aria-hidden="true">#</a> About encapsulation of instructions use <code>shell</code></h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token comment"># \u6307\u5B9A\u8FD0\u884C\u65F6\u7684JAVA_HOME</span>
<span class="token comment">#JAVA_HOME=\${HOME}/.biz-tools/java-se-8u41-ri</span>
<span class="token comment">#PATH=\${JAVA_HOME}/bin:$PATH</span>

<span class="token keyword">if</span> <span class="token operator">!</span> <span class="token function">which</span> java <span class="token operator">&gt;</span> /dev/null <span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;jdk is not installed, please install the version above 1.8&quot;</span>
    <span class="token builtin class-name">exit</span>
<span class="token keyword">fi</span>

<span class="token assign-left variable">JAVA_VERSION</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>java -version <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&#39;1!d&#39;</span> <span class="token operator">|</span> <span class="token function">sed</span> -e <span class="token string">&#39;s/&quot;//g&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print $3}&#39;</span><span class="token variable">)</span></span>

<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token string">&quot;<span class="token variable">\${JAVA_VERSION}</span>&quot;</span> <span class="token operator">=~</span> ^1.8.0.* <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;The jdk version must be greater than or equal to 1.8, please check the environment configuration&quot;</span>
    <span class="token builtin class-name">exit</span>
<span class="token keyword">fi</span>

<span class="token assign-left variable">TOOLS_JAR</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> <span class="token string">&quot;<span class="token variable">$0</span>&quot;</span><span class="token variable">)</span></span>/tools.jar

<span class="token comment"># shellcheck disable=SC2046</span>
java -jar <span class="token string">&quot;<span class="token variable">\${TOOLS_JAR}</span>&quot;</span> <span class="token string">&quot;<span class="token variable">$@</span>&quot;</span> -c <span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> <span class="token string">&quot;<span class="token variable">$0</span>&quot;</span><span class="token variable">)</span></span>/conf/config.properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="how-to-read-your-config" tabindex="-1"><a class="header-anchor" href="#how-to-read-your-config" aria-hidden="true">#</a> How to read your config</h2><p>We encapsulate the <code>initializationConfig</code> function to help you read the configuration. This function can be used with the <code>PropertiesValue</code> annotation to convert the configuration content into the configuration of the entity class.</p><h3 id="how-to-define-entity-classes" tabindex="-1"><a class="header-anchor" href="#how-to-define-entity-classes" aria-hidden="true">#</a> How to define entity classes</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">plus<span class="token punctuation">.</span>jdk<span class="token punctuation">.</span>cli<span class="token punctuation">.</span>model</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">plus<span class="token punctuation">.</span>jdk<span class="token punctuation">.</span>cli<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PropertiesValue</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CliHelpModel</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@PropertiesValue</span><span class="token punctuation">(</span><span class="token string">&quot;plus.jdk.help.header.welcome&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> headerWelcome<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * You can use the resource and path parameters to specify the banner location to output
     */</span>
    <span class="token annotation punctuation">@PropertiesValue</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;plus.jdk.help.header.banner&quot;</span><span class="token punctuation">,</span> resource <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> path <span class="token operator">=</span> <span class="token string">&quot;banner/banner.txt&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> banner<span class="token punctuation">;</span>

    
    <span class="token annotation punctuation">@PropertiesValue</span><span class="token punctuation">(</span><span class="token string">&quot;plus.jdk.help.header.description&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> headerDesc<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PropertiesValue</span><span class="token punctuation">(</span><span class="token string">&quot;plus.jdk.help.footer.description&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> footerDesc<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PropertiesValue</span><span class="token punctuation">(</span><span class="token string">&quot;plus.jdk.help.footer.contact&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> footerContact<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, the content in the configuration will assign values to the member variables of the entity class according to your annotation decoration</p><h3 id="an-example-of-reading-a-configuration-file" tabindex="-1"><a class="header-anchor" href="#an-example-of-reading-a-configuration-file" aria-hidden="true">#</a> An example of reading a configuration file</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">plus<span class="token punctuation">.</span>jdk<span class="token punctuation">.</span>cli<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">PropertiesUtil</span><span class="token punctuation">.</span><span class="token static">initializationConfig</span></span><span class="token punctuation">;</span>
<span class="token comment">//...</span>
<span class="token class-name">CliHelpModel</span> cliHelpModel <span class="token operator">=</span> <span class="token function">initializationConfig</span><span class="token punctuation">(</span><span class="token class-name">CliHelpModel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;cli-plus.properties&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="add-support-for-special-types" tabindex="-1"><a class="header-anchor" href="#add-support-for-special-types" aria-hidden="true">#</a> Add support for special types</h2><p>If your input parameters need to specify some custom types (currently only <code>Boolean</code>, <code>Long</code>, <code>String</code>, <code>Integer</code> are supported).</p><h3 id="customize-your-own-type-adapter" tabindex="-1"><a class="header-anchor" href="#customize-your-own-type-adapter" aria-hidden="true">#</a> Customize your own type adapter</h3><p>You can customize the related serialization functions by implementing the <code>ITypeAdapter</code> interface.</p><p>An example is as follows, the following is an example of the serialization implementation of the <code>Long</code> type:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">plus<span class="token punctuation">.</span>jdk<span class="token punctuation">.</span>cli<span class="token punctuation">.</span>type<span class="token punctuation">.</span>adapter</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span></span><span class="token class-name">TypeAdapter</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LongTypeAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">ITypeAdapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> dataStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dataStr <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Long</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="register-the-implemented-adapter" tabindex="-1"><a class="header-anchor" href="#register-the-implemented-adapter" aria-hidden="true">#</a> Register the implemented adapter</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@CommandLinePlus</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">&quot;this is a test command&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJCommand</span> <span class="token keyword">extends</span> <span class="token class-name">JCommandLinePlus</span> <span class="token punctuation">{</span>

    <span class="token comment">// ...</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">TestJCommand</span> testCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestJCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Register your own implemented adapter component before completing the call</span>
        <span class="token class-name">Options</span><span class="token punctuation">.</span><span class="token function">registerTypeAdapter</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LongTypeAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        testCommand<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34);function h(g,f){const a=r("RouterLink");return i(),c("div",null,[m,n("ul",null,[n("li",null,[l(a,{to:"/zh/cli-plus/"},{default:u(()=>[v]),_:1})])]),b])}var j=o(k,[["render",h],["__file","index.html.vue"]]);export{j as default};
